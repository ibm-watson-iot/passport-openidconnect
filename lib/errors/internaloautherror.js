/**
 * `InternalOAuthError` error.
 *
 * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these
 * objects, error messages can be formatted in a manner that aids in debugging
 * OAuth issues.
 *
 * @api public
 */
function InternalOAuthError(message, err) {
  Error.call(this);
  Error.captureStackTrace(this, arguments.callee);
  this.name = 'InternalOAuthError';
  this.message = message;
  this.oauthError = err;
  if (typeof this.oauthError === 'string' || this.oauthError instanceof Error) {
    console.warn(`error ${this.oauthError}`);
  } else if (typeof this.oauthError === 'object') {
    for (const prop in this.oauthError) {
      if (this.oauthError.hasOwnProperty(prop) && typeof this.oauthError[prop] === 'string') {
        console.warn(`${prop}: ${this.oauthError[prop]}`)
      }
    }
  }
};

/**
 * Inherit from `Error`.
 */
InternalOAuthError.prototype.__proto__ = Error.prototype;

/**
 * Returns a string representing the error.
 *
 * @return {String}
 * @api public
 */
InternalOAuthError.prototype.toString = function() {
  var m = this.message;
  if (this.oauthError) {
    if (typeof this.oauthError === 'string' || this.oauthError instanceof Error) {
      m += ' (' + this.oauthError + ')';
    }
    else if (this.oauthError.statusCode && this.oauthError.data) {
      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';
    }
  }
  return m;
}


/**
 * Expose `InternalOAuthError`.
 */
module.exports = InternalOAuthError;
